perdidaDADO<- 0
perdidaH<- 0
for (i in 1:100) {
apuesta <- 20
# Girar la ruleta principal
mini_juego <- sample(c("H", "Ficha", "Dado"), 1)
if (mini_juego == "H") {
fase1 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase2 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase3 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase4 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.25, 0.75))
multi <- 3
if (fase1 == "Incorrecto" || fase2 == "Incorrecto" || fase3 == "Incorrecto" || fase4 == "Incorrecto" ) {
fase1 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase2 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase3 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase4 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.25, 0.75))
if (fase1 == "Correcto" & fase2 == "Correcto" & fase3 == "Correcto" & fase4 == "Correcto") {
apuestainicial<- apuesta
apuesta <- apuesta * 1.5 #SI GANA MULTIPLICAMOS por la mitad por ser segunda vida
perdidaH <-perdidaH  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
} else {
if (fase1 == "Correcto" & fase2 == "Correcto" & fase3 == "Correcto" & fase4 == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 3 #SI GANA MULTIPLICAMOS por la mitad por ser segunda vida
perdidaH <-perdidaH  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
}
else if (mini_juego == "Ficha") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
if (resultado == "Incorrecto") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
if(resultado == "Correcto"){
apuestainicial<- apuesta
apuesta <- apuesta * 0.65 #SI GANA MULTIPLICAMOS POR la mitad
perdidaFICHA <-perdidaFICHA  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
if (resultado == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 1.3 #SI GANA MULTIPLICAMOS POR 1.5
perdidaFICHA <-perdidaFICHA  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
else {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(1/6, 5/6))
if (resultado == "Incorrecto") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(1/6, 5/6))
if(resultado == "Correcto"){
apuestainicial<- apuesta
apuesta <- apuesta * 1 #SI GANA MULTIPLICAMOS POR LA MITAD
perdidaDADO <-perdidaDADO  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
}else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
if (resultado == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 2 #SI GANA MULTIPLICAMOS POR 2
perdidaDADO <-perdidaDADO  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
}
# Mostrar resultados
print(paste("El casino ganó ", casino_wins, " veces"))
print(paste("El casino perdió ", casino_losses, " veces"))
print(paste("Probabilidad de que el casino gane: ", casino_wins / 100))
print(paste("Probabilidad de que el casino pierda: ", casino_losses / 100))
print(total_perdido_por_casino)
print(perdidaFICHA)
#print(perdidaRULETA)
print(perdidaDADO)
print(perdidaH)
# Inicializar contadores
casino_wins <- 0
casino_losses <- 0
segunda_wins <- 0
segunda_losses <- 0
total_ganado_por_casino <- 0
total_perdido_por_casino <- 0
perdidaFICHA<- 0
#perdidaRULETA<- 0
perdidaDADO<- 0
perdidaH<- 0
for (i in 1:100) {
apuesta <- 20
# Girar la ruleta principal
mini_juego <- sample(c("H", "Ficha", "Dado"), 1)
if (mini_juego == "H") {
fase1 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase2 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase3 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase4 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.25, 0.75))
multi <- 3
if (fase1 == "Incorrecto" || fase2 == "Incorrecto" || fase3 == "Incorrecto" || fase4 == "Incorrecto" ) {
fase1 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase2 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase3 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase4 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.25, 0.75))
if (fase1 == "Correcto" & fase2 == "Correcto" & fase3 == "Correcto" & fase4 == "Correcto") {
apuestainicial<- apuesta
apuesta <- apuesta * 1.5 #SI GANA MULTIPLICAMOS por la mitad por ser segunda vida
perdidaH <-perdidaH  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
} else {
if (fase1 == "Correcto" & fase2 == "Correcto" & fase3 == "Correcto" & fase4 == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 3 #SI GANA MULTIPLICAMOS por la mitad por ser segunda vida
perdidaH <-perdidaH  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
}
else if (mini_juego == "Ficha") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
if (resultado == "Incorrecto") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
if(resultado == "Correcto"){
apuestainicial<- apuesta
apuesta <- apuesta * 0.65 #SI GANA MULTIPLICAMOS POR la mitad
perdidaFICHA <-perdidaFICHA  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
if (resultado == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 1.3 #SI GANA MULTIPLICAMOS POR 1.5
perdidaFICHA <-perdidaFICHA  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
else {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(1/6, 5/6))
if (resultado == "Incorrecto") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(1/6, 5/6))
if(resultado == "Correcto"){
apuestainicial<- apuesta
apuesta <- apuesta * 1 #SI GANA MULTIPLICAMOS POR LA MITAD
perdidaDADO <-perdidaDADO  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
}else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
if (resultado == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 2 #SI GANA MULTIPLICAMOS POR 2
perdidaDADO <-perdidaDADO  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
}
# Mostrar resultados
print(paste("El casino ganó ", casino_wins, " veces"))
print(paste("El casino perdió ", casino_losses, " veces"))
print(paste("Probabilidad de que el casino gane: ", casino_wins / 100))
print(paste("Probabilidad de que el casino pierda: ", casino_losses / 100))
print(total_perdido_por_casino)
print(perdidaFICHA)
#print(perdidaRULETA)
print(perdidaDADO)
print(perdidaH)
# Inicializar contadores
casino_wins <- 0
casino_losses <- 0
segunda_wins <- 0
segunda_losses <- 0
total_ganado_por_casino <- 0
total_perdido_por_casino <- 0
perdidaFICHA<- 0
#perdidaRULETA<- 0
perdidaDADO<- 0
perdidaH<- 0
for (i in 1:10000) {
apuesta <- 20
# Girar la ruleta principal
mini_juego <- sample(c("H", "Ficha", "Dado"), 1)
if (mini_juego == "H") {
fase1 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase2 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase3 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase4 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.25, 0.75))
multi <- 3
if (fase1 == "Incorrecto" || fase2 == "Incorrecto" || fase3 == "Incorrecto" || fase4 == "Incorrecto" ) {
fase1 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase2 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase3 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
fase4 <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.25, 0.75))
if (fase1 == "Correcto" & fase2 == "Correcto" & fase3 == "Correcto" & fase4 == "Correcto") {
apuestainicial<- apuesta
apuesta <- apuesta * 1.5 #SI GANA MULTIPLICAMOS por la mitad por ser segunda vida
perdidaH <-perdidaH  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
} else {
if (fase1 == "Correcto" & fase2 == "Correcto" & fase3 == "Correcto" & fase4 == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 3 #SI GANA MULTIPLICAMOS por la mitad por ser segunda vida
perdidaH <-perdidaH  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
}
else if (mini_juego == "Ficha") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
if (resultado == "Incorrecto") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(0.5, 0.5))
if(resultado == "Correcto"){
apuestainicial<- apuesta
apuesta <- apuesta * 0.65 #SI GANA MULTIPLICAMOS POR la mitad
perdidaFICHA <-perdidaFICHA  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
if (resultado == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 1.3 #SI GANA MULTIPLICAMOS POR 1.5
perdidaFICHA <-perdidaFICHA  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
else {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(1/6, 5/6))
if (resultado == "Incorrecto") {
resultado <- sample(c("Correcto", "Incorrecto"), 1, prob = c(1/6, 5/6))
if(resultado == "Correcto"){
apuestainicial<- apuesta
apuesta <- apuesta * 1 #SI GANA MULTIPLICAMOS POR LA MITAD
perdidaDADO <-perdidaDADO  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
}else {
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
if (resultado == "Correcto") {
casino_losses <- casino_losses + 1
apuestainicial<- apuesta
apuesta <- apuesta * 2 #SI GANA MULTIPLICAMOS POR 2
perdidaDADO <-perdidaDADO  + apuesta - apuestainicial
total_perdido_por_casino <- total_perdido_por_casino+ apuesta - apuestainicial
} else {
casino_wins <- casino_wins + 1
total_ganado_por_casino <-  total_ganado_por_casino + apuesta
}
}
}
# Mostrar resultados
print(paste("El casino ganó ", casino_wins, " veces"))
print(paste("El casino perdió ", casino_losses, " veces"))
print(paste("Probabilidad de que el casino gane: ", casino_wins / 10000))
print(paste("Probabilidad de que el casino pierda: ", casino_losses / 10000))
print(total_perdido_por_casino)
print(perdidaFICHA)
#print(perdidaRULETA)
print(perdidaDADO)
print(perdidaH)
grooming1 <- data.frame(
hora = c("9:00", "10:00", "11:00", "12:00", "13:00", "14:00","15:00","16:00","17:00","18:00"),
disponibilidad = c(0,0,1,1,1,0,0,0,1,1))
grooming2 <- data.frame(
hora = c("9:00", "10:00", "11:00", "12:00", "13:00", "14:00","15:00","16:00","17:00","18:00"),
disponibilidad = c(0,0,1,1,1,0,0,0,1,1))
final <- merge(grooming1,grooming2, by = 'hora')
View(grooming1)
View(grooming2)
final <- merge(grooming1,grooming2, by = 'hora')
View(final)
horarios <- data.frame(
hora = c("9:00", "10:00", "11:00", "12:00", "13:00", "14:00","15:00","16:00","17:00","18:00"),
grooming1 = c(0,0,1,1,1,0,0,0,1,1),
grooming2 = c(0,0,1,1,1,0,0,0,1,1))
View(horarios)
van <- 2
cita <- 3
peatonales <- 4
setwd("~/Documentos Christian Sandoval/U/Sexto Semestre/Data-Wrangling---Christian-Sandoval/Analisis de texto")
library(lubridate)
library(rwhatsapp)
library(textdata)
library(tidytext)
library(tidyverse)
library(tidyr)
library(ggimage)
library(stopwords)
library(ggplot2)
library(igraph)
library(ggraph)
library(dplyr)
chat <- rwa_read("chat.txt")
chat %>%
mutate(day = date(time)) %>%
count(day) %>%
ggplot(aes(x = day, y = n)) +
geom_bar(stat = "identity", fill="lightblue") +
ylab("Frecuencia") + xlab("Fecha") +
ggtitle("Mensajes por dÃ­a")
## Palabras mas frecuentes
chat %>%
unnest_tokens(input = text,
output = word) %>%
select(word, author) %>%
mutate(word = gsub(".com", "", word)) %>%
count(author, word, sort = TRUE) %>%
filter(n > 10) %>%
group_by(author) %>%
top_n(n = 6) %>%
ggplot(aes(x = reorder_within(word, n, author), y = n, fill = author)) +
geom_col(show.legend = FALSE) +
geom_text(aes(label = scales::comma(n)), hjust = -0.1) +
ylab("") +
xlab("") +
coord_flip() +
facet_wrap(~author, ncol = 2, scales = "free_y") +
scale_x_reordered() +
ggtitle("Palabras mas frecuentes por sender")
library(DataExplorer)
library(readr)
library(dplyr)
library(ggplot2)
data <- read_csv("StudentsPerformance.csv")
data <- data %>%
rename(math_score = 'math score', reading_score = `reading score` , writing_score = `writing score` )
introduce(data)
plot_missing(data)
plot_histogram(data)
plot_correlation(data)
# Veo las diferentes dietas que hay
unique(data$lunch)
## Separamos las notas de los estudiantes de acuerdo a la dieta del estudiante
data_standard <- data %>%
filter(lunch == 'standard')
nrow(data_standard)
data_free_reduce <- data %>%
filter(lunch == 'free/reduced')
nrow(data_free_reduce)
nrow(data)
porcentaje_standard <- (nrow(data_standard) / nrow(data)) *100
porcentaje_free_reduced <- (nrow(data_free_reduce) / nrow(data)) * 100
# Estudiantes con lunch standard con notas arriba de 80
data_standard_arriba <- data_standard %>%
filter(math_score > 80, reading_score > 80, writing_score > 80)
porcentaje_80_free <- (11/355) * 100
# Estudiantes con lunch free/reduced con notas arriba de 80
data_free_arriba <- data_free_reduce %>%
filter(math_score > 80, reading_score > 80, writing_score > 80)
porcentaje_80_standard <- (99/645) * 100
summary_by_lunch <- data %>%
group_by(lunch) %>%
summarize(
mean_math_score = mean(math_score),
mean_reading_score = mean(reading_score),
mean_writing_score = mean(writing_score)
)
avg_scores_long <- summary_by_lunch %>%
pivot_longer(cols = starts_with("mean"), names_to = "Score", values_to = "Mean_Score")
# Crea el gráfico de barras
ggplot(avg_scores_long, aes(x = lunc, y = Mean_Score, fill = Score)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Promedio de Puntuaciones por Tipo de Dieta",
x = "Tipo de Dieta",
y = "Promedio de Puntuación") +
scale_fill_manual(values = c("mean_math_score" = "red", "mean_reading_score" = "blue", "mean_writing_score" = "green")) +
theme_minimal()
# ANOVA para math_score por tipo de dieta
anova_math <- aov(math_score ~ lunch, data = data)
# ANOVA para reading_score por tipo de dieta
anova_reading <- aov(reading_score ~ lunch, data = data)
# ANOVA para writing_score por tipo de dieta
anova_writing <- aov(writing_score ~ lunch, data = data)
print("ANOVA for Math Score:")
print(summary(anova_math))
print("\nANOVA for Reading Score:")
print(summary(anova_reading))
print("\nANOVA for Writing Score:")
print(summary(anova_writing))
library(DataExplorer)
library(readr)
library(dplyr)
library(ggplot2)
data <- read_csv("StudentsPerformance.csv")
data <- data %>%
rename(math_score = 'math score', reading_score = `reading score` , writing_score = `writing score` )
introduce(data)
plot_missing(data)
plot_histogram(data)
plot_correlation(data)
setwd("~/Documentos Christian Sandoval/U/Sexto Semestre/Data-Wrangling---Christian-Sandoval/Visualización")
library(DataExplorer)
library(readr)
library(dplyr)
library(ggplot2)
data <- read_csv("StudentsPerformance.csv")
data <- data %>%
rename(math_score = 'math score', reading_score = `reading score` , writing_score = `writing score` )
introduce(data)
plot_missing(data)
plot_histogram(data)
plot_correlation(data)
# Veo las diferentes dietas que hay
unique(data$lunch)
## Separamos las notas de los estudiantes de acuerdo a la dieta del estudiante
data_standard <- data %>%
filter(lunch == 'standard')
nrow(data_standard)
data_free_reduce <- data %>%
filter(lunch == 'free/reduced')
nrow(data_free_reduce)
nrow(data)
porcentaje_standard <- (nrow(data_standard) / nrow(data)) *100
porcentaje_free_reduced <- (nrow(data_free_reduce) / nrow(data)) * 100
# Estudiantes con lunch standard con notas arriba de 80
data_standard_arriba <- data_standard %>%
filter(math_score > 80, reading_score > 80, writing_score > 80)
porcentaje_80_free <- (11/355) * 100
# Estudiantes con lunch free/reduced con notas arriba de 80
data_free_arriba <- data_free_reduce %>%
filter(math_score > 80, reading_score > 80, writing_score > 80)
porcentaje_80_standard <- (99/645) * 100
summary_by_lunch <- data %>%
group_by(lunch) %>%
summarize(
mean_math_score = mean(math_score),
mean_reading_score = mean(reading_score),
mean_writing_score = mean(writing_score)
)
avg_scores_long <- summary_by_lunch %>%
pivot_longer(cols = starts_with("mean"), names_to = "Score", values_to = "Mean_Score")
# Crea el gráfico de barras
ggplot(avg_scores_long, aes(x = lunc, y = Mean_Score, fill = Score)) +
geom_bar(stat = "identity", position = "dodge", color = "black") +
labs(title = "Promedio de Puntuaciones por Tipo de Dieta",
x = "Tipo de Dieta",
y = "Promedio de Puntuación") +
scale_fill_manual(values = c("mean_math_score" = "red", "mean_reading_score" = "blue", "mean_writing_score" = "green")) +
theme_minimal()
# ANOVA para math_score por tipo de dieta
anova_math <- aov(math_score ~ lunch, data = data)
# ANOVA para reading_score por tipo de dieta
anova_reading <- aov(reading_score ~ lunch, data = data)
# ANOVA para writing_score por tipo de dieta
anova_writing <- aov(writing_score ~ lunch, data = data)
print("ANOVA for Math Score:")
print(summary(anova_math))
print("\nANOVA for Reading Score:")
print(summary(anova_reading))
print("\nANOVA for Writing Score:")
print(summary(anova_writing))
View(avg_scores_long)
View(data_standard)
View(data_standard_arriba)
View(data_standard_arriba)
View(data_free_arriba)
View(summary_by_lunch)
View(data_standard)
data_arriba <- data %>%
filter(math_score > 80, reading_score > 80, writing_score > 80)
View(data_arriba)
11/110
99/110
